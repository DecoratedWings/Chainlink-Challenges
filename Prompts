The Challenges
You may work on the challenges in any order. You don’t have to complete all of the challenges.
Challenge #1:
Using a solidity contract, write a method that takes two uint256 arrays and returns uint256 array with only the items that are in one but not both arrays.
Logical Example:
Given [1, 34, 5, 7, 62] and [7, 34, 9, 5, 6], you should return an array containing [1, 62, 9, 6] (order does not matter)
Example signature: (your signature does not have to match)
function difference(uint256[] memory left, uint256[] memory right) public view returns (uint256[] memory) {}


Challenge #2:
Using a solidity contract, write a method that takes one uint256 and returns a uint8. The return value should be determined by taking each of the digits of the original number and adding them together, repeating until the process results in a number less than 10.
The number could be of any uint256 length.
Logical Example:
Given the number 945, take 9+4+5 which results in 18, then take 1+8 which results in 9, return 9.
Example Signature:
function difference(uint256 memory original) public view returns (uint8 memory) {}

Challenge #3:
Generate a random number between 111 and 999 using Chainlink’s VRF, but ensure that the number you generate does not have any even digits (0,2,4,6,8) in the final result. Ensure that your random number still has a fair distribution.
Background: Learn about Chainlink VRF or read the Chainlink VRF Tutorial.
Examples of valid results:
577
131
999

Examples of invalid results:
100
083
064
293
011
583
1000

Example signature: (your signature does not have to match)
function fulfillRandomness(uint256[] memory left, uint256[] memory right) public view returns (uint256[] memory) {

